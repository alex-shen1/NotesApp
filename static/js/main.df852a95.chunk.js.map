{"version":3,"sources":["NotesList.js","WriteNotePanel.js","App.js","serviceWorker.js","index.js"],"names":["NotesList","id","this","props","notes","map","note","Card","Body","Title","title","Button","variant","onClick","setEditingNoteFunc","index","deleteNoteFunc","Text","text","Component","WriteNotePanel","state","editing","Form","Group","controlId","Label","Control","type","placeholder","onChange","setActiveTitleFunc","value","activeTitle","as","rows","setActiveTextFunc","activeText","editNoteFunc","addNoteFunc","App","clearNote","setState","addNote","length","prevState","setEditingNote","editIndex","setActiveTitle","event","target","setActiveText","editNote","console","log","new_notes","deleteNote","del_index","splice","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.df852a95.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nclass NotesList extends Component {\r\n    render() {\r\n        return <div id=\"notesList\">\r\n            <h1>Your Notes</h1>\r\n            <div>\r\n                {\r\n                    this.props.notes.map(note => {\r\n                        return (\r\n                            <Card>\r\n                                <Card.Body>\r\n                                    <Card.Title>{note.title}\r\n                                        <Button variant=\"light\"\r\n                                            onClick={() => this.props.setEditingNoteFunc(note.index)}>Edit</Button>\r\n                                        <Button variant=\"danger\"\r\n                                        onClick={() => this.props.deleteNoteFunc(note.index)}>Delete</Button>\r\n                                    </Card.Title>\r\n\r\n                                    <Card.Text>{note.text}</Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default NotesList;","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass WriteNotePanel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            title: \"\",\r\n            text: \"\"\r\n        }\r\n\r\n        // this.changeTitle = this.changeTitle.bind(this);\r\n        // this.changeText = this.changeText.bind(this);\r\n        // this.createNote = this.createNote.bind(this);\r\n    }\r\n\r\n    // changeTitle(event) {\r\n    //     this.setState({ title: event.target.value })\r\n    //     this.props.setActiveTitleFunc(event)\r\n    // }\r\n\r\n    // changeText(event) {\r\n    //     this.setState({ text: event.target.value })\r\n    //     this.props.setActiveTextFunc(event)\r\n    // }\r\n\r\n    // createNote(event) {\r\n    //     this.props.addNoteFunc(this.state.title, this.state.text);\r\n    //     this.setState({ title: \"\" });\r\n    //     this.setState({ text: \"\" });\r\n    // }\r\n\r\n    render() {\r\n        return <div id=\"addNote\">\r\n            <h1> {this.props.editing ? \"Editing Note\" : \"Create Note\"} </h1>\r\n            <Form>\r\n                <Form.Group controlId=\"createTitle\">\r\n                    <Form.Label>Title</Form.Label>\r\n                    <Form.Control type=\"textarea\"\r\n                        placeholder=\"Title\"\r\n                        onChange={this.props.setActiveTitleFunc}\r\n                        value={this.props.activeTitle} />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"setText\">\r\n                    <Form.Label>Text</Form.Label>\r\n                    <Form.Control as=\"textarea\"\r\n                        rows=\"8\"\r\n                        placeholder=\"Text\"\r\n                        onChange={this.props.setActiveTextFunc}\r\n                        id=\"noteText\"\r\n                        value={this.props.activeText} />\r\n                </Form.Group>\r\n                 \r\n                <Button variant=\"primary\" \r\n                onClick={ this.props.editing ? (()=>this.props.editNoteFunc()) : (()=>this.props.addNoteFunc())}>\r\n                    {this.props.editing ? \"Edit Note\" : \"Create Note\"}\r\n                </Button>\r\n                \r\n            </Form>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default WriteNotePanel;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport NotesList from \"./NotesList.js\";\r\nimport WriteNotePanel from \"./WriteNotePanel.js\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      notes: [{ title: \"placeholder title\", text: \"placeholder text\", index: 0 }],\r\n      activeTitle: \"\",\r\n      activeText: \"\",\r\n      editing: false,\r\n      editIndex: 0\r\n    };\r\n  }\r\n\r\n  clearNote = () => {\r\n    this.setState({ activeTitle: \"\" });\r\n    this.setState({ activeText: \"\" });\r\n  }\r\n  addNote = () => {\r\n    let note = {\r\n      title: this.state.activeTitle,\r\n      text: this.state.activeText,\r\n      index: this.state.notes.length\r\n    }\r\n    this.setState(prevState => {\r\n      return { notes: [...prevState.notes, note] };\r\n    });\r\n    this.clearNote();\r\n    this.setState({ editing: false });\r\n  };\r\n\r\n  setEditingNote = (index) => {\r\n    this.setState({ editing: true })\r\n    this.setState({ editIndex: index })\r\n    this.setState({ activeTitle: this.state.notes[index].title })\r\n    this.setState({ activeText: this.state.notes[index].text })\r\n  }\r\n\r\n  setActiveTitle = (event) => {\r\n    this.setState({ activeTitle: event.target.value });\r\n  }\r\n\r\n  setActiveText = (event) => {\r\n    this.setState({ activeText: event.target.value });\r\n  }\r\n\r\n  editNote = () => {\r\n    console.log(\"editing note\")\r\n    let new_notes = this.state.notes;\r\n\r\n    new_notes[this.state.editIndex].title = this.state.activeTitle;\r\n    new_notes[this.state.editIndex].text = this.state.activeText;\r\n\r\n    this.setState({notes: new_notes});\r\n    this.setState({editing: false})\r\n    this.clearNote();\r\n  }\r\n\r\n  deleteNote = (del_index) => {\r\n    let new_notes = this.state.notes; \r\n    new_notes.splice(del_index, 1)\r\n    this.setState({notes: new_notes});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <WriteNotePanel\r\n          addNoteFunc={this.addNote}\r\n          setActiveTitleFunc={this.setActiveTitle}\r\n          setActiveTextFunc={this.setActiveText}\r\n          editing={this.state.editing}\r\n          activeTitle={this.state.activeTitle}\r\n          activeText={this.state.activeText}\r\n          editNoteFunc={this.editNote}\r\n        />\r\n        <NotesList \r\n          notes={this.state.notes}\r\n          setEditingNoteFunc={this.setEditingNote} \r\n          deleteNoteFunc={this.deleteNote} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}